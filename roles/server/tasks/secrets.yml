---
- name: Check if the secret key file exists
  become: true
  ansible.builtin.stat:
    path: "{{ gitea_security_secret_key_path }}"
  register: _gitea_secret_key_file

- name: Generate a new secret key, if not provided
  when:
    - gitea_secret_key is not defined
    - not _gitea_secret_key_file.stat.exists
  block:
    - name: Generate a new secret key
      become: true
      ansible.builtin.command:
        cmd: "{{ gitea_install_path }} generate secret SECRET_KEY"
      register: _gitea_secret_key_cmd
      changed_when: false

    - name: Set secret key to variable
      ansible.builtin.set_fact:
        gitea_secret_key: "{{ _gitea_secret_key_cmd.stdout }}"

- name: Save secret key to file, if provided
  when:
    - gitea_secret_key is defined
  become: true
  ansible.builtin.copy:
    content: "{{ gitea_secret_key }}"
    dest: "{{ gitea_security_secret_key_path }}"
    owner: "{{ gitea_user }}"
    group: "{{ gitea_group }}"
    mode: '0600'
    backup: true
  notify:
    - _gitea_restart_gitea

- name: Check if the internal token file exists
  become: true
  ansible.builtin.stat:
    path: "{{ gitea_security_internal_token_path }}"
  register: _gitea_internal_token_file

- name: Generate a new internal token, if not provided
  when:
    - gitea_internal_token is not defined
    - not _gitea_internal_token_file.stat.exists
  block:
    - name: Generate a new internal token
      become: true
      ansible.builtin.command:
        cmd: "{{ gitea_install_path }} generate secret INTERNAL_TOKEN"
      register: _gitea_internal_token_cmd
      changed_when: false

    - name: Set internal token to variable
      ansible.builtin.set_fact:
        gitea_internal_token: "{{ _gitea_internal_token_cmd.stdout }}"

- name: Save internal token to file, if provided
  when:
    - gitea_internal_token is defined
  become: true
  ansible.builtin.copy:
    content: "{{ gitea_internal_token }}"
    dest: "{{ gitea_security_internal_token_path }}"
    owner: "{{ gitea_user }}"
    group: "{{ gitea_group }}"
    mode: '0600'
    backup: true
  notify:
    - _gitea_restart_gitea

- name: Check if the LFS JWT secret file exists
  become: true
  ansible.builtin.stat:
    path: "{{ gitea_server_lfs_jwt_secret_path }}"
  register: _gitea_lfs_jwt_secret_file

- name: Generate a new LFS JWT secret, if not provided
  when:
    - gitea_lfs_jwt_secret is not defined
    - not _gitea_lfs_jwt_secret_file.stat.exists
  block:
    - name: Generate a new LFS JWT secret
      become: true
      ansible.builtin.command:
        cmd: "{{ gitea_install_path }} generate secret JWT_SECRET"
      register: _gitea_lfs_jwt_secret_cmd
      changed_when: false

    - name: Set LFS JWT secret to variable
      ansible.builtin.set_fact:
        gitea_lfs_jwt_secret: "{{ _gitea_lfs_jwt_secret_cmd.stdout }}"

- name: Save LFS JWT secret to file, if provided
  when:
    - gitea_lfs_jwt_secret is defined
  become: true
  ansible.builtin.copy:
    content: "{{ gitea_lfs_jwt_secret }}"
    dest: "{{ gitea_server_lfs_jwt_secret_path }}"
    owner: "{{ gitea_user }}"
    group: "{{ gitea_group }}"
    mode: '0600'
    backup: true
  notify:
    - _gitea_restart_gitea

- name: Check if the OAuth2 JWT secret file exists
  become: true
  ansible.builtin.stat:
    path: "{{ gitea_oauth2_jwt_secret_path }}"
  register: _gitea_oauth2_jwt_secret_file

- name: Generate a new OAuth2 JWT secret, if not provided
  when:
    - gitea_oauth2_jwt_secret is not defined
    - not _gitea_oauth2_jwt_secret_file.stat.exists
  block:
    - name: Generate a new OAuth2 JWT secret
      become: true
      ansible.builtin.command:
        cmd: "{{ gitea_install_path }} generate secret JWT_SECRET"
      register: _gitea_oauth2_jwt_secret_cmd
      changed_when: false

    - name: Set OAuth2 JWT secret to variable
      ansible.builtin.set_fact:
        gitea_oauth2_jwt_secret: "{{ _gitea_oauth2_jwt_secret_cmd.stdout }}"

- name: Save OAuth2 JWT secret to file, if provided
  when:
    - gitea_oauth2_jwt_secret is defined
  become: true
  ansible.builtin.copy:
    content: "{{ gitea_oauth2_jwt_secret }}"
    dest: "{{ gitea_oauth2_jwt_secret_path }}"
    owner: "{{ gitea_user }}"
    group: "{{ gitea_group }}"
    mode: '0600'
    backup: true
  notify:
    - _gitea_restart_gitea
